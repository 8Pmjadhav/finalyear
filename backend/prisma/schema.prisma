// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Follow {
  id           Int  @id @default(autoincrement())
  follower_id  Int
  follower     User @relation("Followers", fields: [follower_id], references: [id], onDelete: Cascade) // Define a relation name "Followers" and specify fields and references
  following_id Int
  following    User @relation("Followings", fields: [following_id], references: [id], onDelete: Cascade) // Define a relation name "Followings" and specify fields and references

  @@unique([follower_id, following_id])
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(199)
  email        String    @unique @db.VarChar(199)
  password     String    @db.VarChar(199)
  otp          String?   @db.VarChar(55)
  otpExpires   DateTime?
  isVerified   Boolean   @default(false)
  avatar_id    String?   @db.VarChar(199)
  avatar       String?   @db.VarChar(255)
  backcover_id String?   @db.VarChar(199)
  backcover    String?   @db.VarChar(255)
  profession   String?   @db.VarChar(199)
  gender       String?   @db.VarChar(55)
  description  String?
  refreshToken String?   @db.VarChar(255)

  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
  post       Post[]
  reply      Reply[]
  likes      Likes[]
  notifications Notifications[]
  followers  Follow[] @relation("Followers") // Reference the "Followers" relation
  following  Follow[] @relation("Followings") // Reference the "Followings" relation
}

model Post {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  image_id   String?  @db.VarChar(199)
  image      String?  @db.VarChar(255)
  video_id   String?  @db.VarChar(199)
  video      String?  @db.VarChar(255)
  content    String?  @db.VarChar(555)
  reply      Reply[]
  likes      Likes[]
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
}

model Reply {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  content    String?
  created_At DateTime @default(now())
  updated_At DateTime @updatedAt
}

model Likes {
  id      Int  @id @default(autoincrement())
  user_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post_id Int
  post    Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  created_At DateTime @default(now())
  updated_At DateTime @updatedAt

  @@unique([user_id, post_id]) // Composite unique constraint
}

model Notifications{
  id      Int  @id @default(autoincrement())
  user_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  message String @db.VarChar(255)
  created_At DateTime @default(now())
}